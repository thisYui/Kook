generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

model User {
  id                      String    @id @default(uuid()) @map("user_id") @db.Uuid
  name                    String    @db.VarChar(255)
  email                   String    @unique @db.VarChar(255)
  password_hash           String    @db.VarChar(255)
  avatar_url              String?   @db.Text
  language                String?   @default("en") @db.VarChar(10)  // ISO 639-1 codes
  theme                   String?   @default("light") @db.VarChar(20)
  bio                     String?   @db.Text
  count_finished_recipes  Int       @default(0)
  count_posts             Int       @default(0)
  count_followers         Int       @default(0)
  role                    Role      @default(USER)
  is_verified             Boolean   @default(false)
  is_disabled             Boolean   @default(false)
  is_deleted              Boolean   @default(false)
  last_login              DateTime?
  last_active             DateTime?
  created_at              DateTime  @default(now()) @db.Timestamp
  updated_at              DateTime  @updatedAt @db.Timestamp
  deleted_at              DateTime?

  // Relations
  allergies     UserAllergy[]
  jwt_tokens    JwtToken[]
  following     Follow[]       @relation("Follower")
  followers     Follow[]       @relation("Followee")
  posts         Post[]
  ratings       Rating[]
  comments      Comment[]
  badges        UserBadge[]
  reposts       Repost[]
  notebooks     Notebook[]
  meal_plans    MealPlanMeta[]
  notifications Notification[]
  notes         Note[]

  @@index([email])
  @@index([is_deleted])
  @@index([created_at])
  @@index([name])
  @@index([role])
  @@index([is_verified])
  @@index([is_disabled])
  @@index([last_active])
  @@map("users")
}

enum Category {
  VEGETABLES
  MEAT_POULTRY
  SEAFOOD
  DAIRY_EGGS
  GRAINS_LEGUMES
  FRUITS
  SPICES_HERBS
  NUTS_SEEDS
  BEVERAGES
  BAKING_DESSERT
  CANNED_PRESERVED
  FROZEN
  OTHERS
  UNCATEGORIZED
}

model IngredientCatalog {
  ingredient_key String   @id @db.Text
  display_name   String   @db.VarChar(255)
  category       Category @default(UNCATEGORIZED)
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamp
  updated_at     DateTime @updatedAt @db.Timestamp

  // Relations
  allergies   UserAllergy[]
  ingredients Ingredient[]

  @@index([category])
  @@index([is_active])
  @@index([display_name])
  @@map("ingredient_catalog")
}

model UserAllergy {
  id             String   @id @default(uuid()) @db.Uuid
  user_id        String   @db.Uuid
  ingredient_key String   @db.Text
  is_active      Boolean  @default(true)
  created_at     DateTime @default(now()) @db.Timestamp
  updated_at     DateTime @updatedAt @db.Timestamp

  // Relations
  user       User              @relation(fields: [user_id], references: [id], onDelete: Cascade)
  ingredient IngredientCatalog @relation(fields: [ingredient_key], references: [ingredient_key], onDelete: Cascade)

  @@unique([user_id, ingredient_key])
  @@index([user_id])
  @@map("user_allergies")
}

enum TokenType {
  REFRESH
  ACCESS

  @@map("token_type")
}

model JwtToken {
  id           String    @id @default(uuid()) @map("jwt_id") @db.Uuid
  user_id      String    @db.Uuid
  jti          String    @unique @db.VarChar(64)
  type         TokenType @default(REFRESH)
  hashed_token String?   @db.VarChar(255)
  device_name  String?   @db.VarChar(100)
  user_agent   String?   @db.Text
  ip_address   String?   @db.VarChar(45)
  exp          DateTime  @db.Timestamp
  revoked      Boolean   @default(false)
  revoked_at   DateTime?
  created_at   DateTime  @default(now()) @db.Timestamp
  updated_at   DateTime  @updatedAt @db.Timestamp

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([jti])
  @@index([type])
  @@index([exp])
  @@index([revoked])
  @@map("jwt_tokens")
}

model Follow {
  id          String   @id @default(uuid()) @map("follow_id") @db.Uuid
  follower_id String   @db.Uuid
  followee_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp

  // Relations
  follower User @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  followee User @relation("Followee", fields: [followee_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, followee_id])
  @@index([follower_id])
  @@index([followee_id])
  @@map("follows")
}

model Post {
  id                  String    @id @default(uuid()) @map("post_id") @db.Uuid
  author_id           String    @db.Uuid
  title               String    @db.VarChar(500)
  short_description   String?   @db.Text
  rating_avg          Decimal?  @default(0) @db.Decimal(3, 2)
  rating_count        Int       @default(0)
  image_url           String?   @db.Text
  view_count          Int       @default(0)
  comment_count       Int       @default(0)
  repost_count        Int       @default(0)
  notebook_count      Int       @default(0)
  reply_question_id   String?   @db.Uuid
  is_published        Boolean   @default(true)
  is_disabled         Boolean   @default(false)
  is_deleted          Boolean   @default(false)
  created_at          DateTime  @default(now()) @db.Timestamp
  updated_at          DateTime  @updatedAt @db.Timestamp
  deleted_at          DateTime?

  // Relations
  author      User         @relation(fields: [author_id], references: [id], onDelete: Cascade)
  question    Question?    @relation("QuestionReplies", fields: [reply_question_id], references: [id])
  recipe      Recipe?
  ingredients Ingredient[]
  ratings     Rating[]
  comments    Comment[]
  reposts     Repost[]
  notebooks   Notebook[]
  tags        PostTag[]
  notes       Note[]

  @@index([author_id])
  @@index([is_deleted])
  @@index([is_published])
  @@index([created_at])
  @@index([rating_avg])
  @@index([view_count])
  @@index([title])
  @@map("posts")
}

model Question {
  id          String   @id @default(uuid()) @map("question_id") @db.Uuid
  image_url   String?  @db.Text
  question    String   @db.Text
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @updatedAt @db.Timestamp

  // Relations
  posts Post[]  @relation("QuestionReplies")

  @@map("questions")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD

  @@map("difficulty")
}

model Recipe {
  id              String   @id @default(uuid()) @map("recipe_id") @db.Uuid
  post_id         String   @unique @db.Uuid
  total_minute    Int?
  cook_minute     Int?
  difficulty      Difficulty?
  total_steps     Int?     @default(0)
  current_version Int      @default(1)
  calories        Int?     // if null, not information about calories
  created_at      DateTime @default(now()) @db.Timestamp
  updated_at      DateTime @updatedAt @db.Timestamp

  // Relations
  post         Post               @relation(fields: [post_id], references: [id], onDelete: Cascade)
  version_maps RecipeVersionMap[]

  @@index([difficulty])
  @@index([post_id])
  @@index([total_minute])
  @@map("recipes")
}

model RecipeVersionMap {
  id            String    @id @default(uuid()) @db.Uuid
  recipe_id     String    @db.Uuid
  mongo_version Int
  is_synced     Boolean   @default(false)
  created_at    DateTime  @default(now()) @db.Timestamp
  synced_at     DateTime?

  // Relations
  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade)

  @@index([recipe_id])
  @@index([is_synced])
  @@map("recipe_version_maps")
}

enum Unit {
  // Weight
  MILLIGRAM
  GRAM
  KILOGRAM
  OUNCE
  POUND

  // Volume
  MILLILITER
  LITER
  CUP
  TABLESPOON
  TEASPOON
  GALLON
  PINCH
  DASH
  DROP

  // Count
  PIECE     // vật thể chung (bánh, viên, khúc)
  SLICE     // lát
  CLOVE     // nhánh tỏi
  BUNCH     // nắm rau
  STALK     // cọng cần
  PACK      // gói
  FRUIT     // quả, trái

  @@map("unit")
}


model Ingredient {
  id             String   @id @default(uuid()) @map("ingredient_id") @db.Uuid
  post_id        String   @db.Uuid
  ingredient_key String   @db.Text
  quantity       Decimal? @db.Decimal(10, 2)
  unit           Unit?
  is_optional    Boolean  @default(false)
  display_order  Int      @default(0)
  created_at     DateTime @default(now()) @db.Timestamp
  updated_at     DateTime @updatedAt @db.Timestamp

  // Relations
  post               Post              @relation(fields: [post_id], references: [id], onDelete: Cascade)
  ingredient_catalog IngredientCatalog @relation(fields: [ingredient_key], references: [ingredient_key], onDelete: Cascade)

  @@index([post_id])
  @@index([ingredient_key])
  @@map("ingredients")
}

model Rating {
  id         String   @id @default(uuid()) @map("rating_id") @db.Uuid
  post_id    String   @db.Uuid
  user_id    String   @db.Uuid
  value      Int      @db.SmallInt
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  // Relations
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@index([post_id])
  @@index([user_id])
  @@map("ratings")
}

model Comment {
  id          String    @id @default(uuid()) @map("comment_id") @db.Uuid
  post_id     String    @db.Uuid
  user_id     String    @db.Uuid
  content     String    @db.Text
  is_edited   Boolean   @default(false)
  is_disabled Boolean   @default(false)
  is_deleted  Boolean   @default(false)
  created_at  DateTime  @default(now()) @db.Timestamp
  updated_at  DateTime  @updatedAt @db.Timestamp
  deleted_at  DateTime?

  // Relations
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([post_id])
  @@index([user_id])
  @@index([is_deleted])
  @@map("comments")
}

model Badge {
  id          String   @id @default(uuid()) @map("badge_id") @db.Uuid
  title       String   @db.VarChar(255)
  description String?  @db.Text
  icon_url    String?  @db.Text
  criteria    Json     @db.JsonB
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @updatedAt @db.Timestamp

  // Relations
  user_badges UserBadge[]

  @@index([is_active])
  @@map("badges")
}

model UserBadge {
  id         String   @id @default(uuid()) @db.Uuid
  user_id    String   @db.Uuid
  badge_id   String   @db.Uuid
  revoked    Boolean  @default(false)
  revoked_at DateTime?
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  // Relations
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badge_id], references: [id], onDelete: Cascade)

  @@unique([user_id, badge_id])
  @@index([user_id])
  @@index([badge_id])
  @@map("user_badges")
}

model Repost {
  id               String    @id @default(uuid()) @map("repost_id") @db.Uuid
  original_post_id String    @db.Uuid
  sharer_id        String    @db.Uuid
  is_deleted       Boolean   @default(false)
  created_at       DateTime  @default(now()) @db.Timestamp
  updated_at       DateTime  @updatedAt @db.Timestamp
  deleted_at       DateTime?

  // Relations
  original_post Post @relation(fields: [original_post_id], references: [id], onDelete: Cascade)
  sharer        User @relation(fields: [sharer_id], references: [id], onDelete: Cascade)

  @@index([original_post_id])
  @@index([sharer_id])
  @@index([is_deleted])
  @@map("reposts")
}

model Notebook {
  id         String    @id @default(uuid()) @map("notebook_id") @db.Uuid
  user_id    String    @db.Uuid
  post_id    String    @db.Uuid
  is_deleted Boolean   @default(false)
  created_at DateTime  @default(now()) @db.Timestamp
  updated_at DateTime  @updatedAt @db.Timestamp
  deleted_at DateTime?

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
  @@index([user_id])
  @@index([post_id])
  @@index([is_deleted])
  @@map("notebooks")
}

model Tag {
  id          String   @id @default(uuid()) @map("tag_id") @db.Uuid
  name        String   @unique @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  usage_count Int      @default(0)
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @updatedAt @db.Timestamp

  // Relations
  posts PostTag[]

  @@index([slug])
  @@index([usage_count])
  @@index([is_active])
  @@index([name])
  @@map("tags")
}

model PostTag {
  id         String   @id @default(uuid()) @db.Uuid
  post_id    String   @db.Uuid
  tag_id     String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  // Relations
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([post_id, tag_id])
  @@index([post_id])
  @@index([tag_id])
  @@map("post_tags")
}

model MealPlanMeta {
  id         String   @id @default(uuid()) @map("plan_id") @db.Uuid
  user_id    String   @db.Uuid
  goal       String?  @db.Text
  promt      String?  @db.Text
  day_start  DateTime @db.Date
  version    Int      @default(1)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamp
  updated_at DateTime @updatedAt @db.Timestamp

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([is_active])
  @@map("meal_plan_meta")
}

enum NotificationType {
  follow
  comment
  rating
  badge
  repost
  system

  @@map("notification_type")
}

model Notification {
  id         String           @id @default(uuid()) @map("notification_id") @db.Uuid
  user_id    String           @db.Uuid
  type       NotificationType
  title      String?          @db.VarChar(255)
  content    String?          @db.Text
  is_read    Boolean          @default(false)
  read_at    DateTime?
  created_at DateTime         @default(now()) @db.Timestamp
  updated_at DateTime         @updatedAt @db.Timestamp

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([is_read])
  @@index([created_at])
  @@map("notifications")
}

model Note {
  id          String   @id @default(uuid()) @map("note_id") @db.Uuid
  user_id     String   @db.Uuid
  post_id     String   @db.Uuid
  step_order  Int?
  content     String   @db.Text
  color       Int?
  start_index Int?
  end_index   Int?
  version     Int      @default(1)
  created_at  DateTime @default(now()) @db.Timestamp
  updated_at  DateTime @updatedAt @db.Timestamp

  // Relations
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  post Post @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([post_id])
  @@map("notes")
}
